{"version":3,"sources":["../../src/util/httpclient.js"],"names":["METHOD_GET","METHOD_POST","METHOD_PUT","METHOD_DELETE","requestAPI","method","url","_headers","_dataBody","isJSON","headers","dataBody","qs","stringify","console","log","config","validateStatus","params","data","HttpClient","get","post","put"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,UAAU,GAAG,KAAnB;AACA,IAAMC,WAAW,GAAG,MAApB;AACA,IAAMC,UAAU,GAAG,KAAnB;AACA,IAAMC,aAAa,GAAG,QAAtB;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,GAA5B,EAA2E;AAAA,MAA1CC,QAA0C,uEAA/B,EAA+B;;AAAA,MAA3BC,SAA2B;;AAAA,MAAhBC,MAAgB,uEAAP,KAAO;AACvE,MAAMC,OAAO,GAAGH,QAAhB;AACA,MAAII,QAAQ,GAAGH,SAAf;;AAEA,MAAIC,MAAJ,EAAY;AACRC,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACH;;AAED,MAAID,MAAM,KAAKJ,MAAM,KAAKJ,WAAX,IAA0BI,MAAM,KAAKH,UAA1C,CAAV,EAAiE;AAC7DQ,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACH,GAFD,MAEO,IAAIL,MAAM,KAAKJ,WAAX,IAA0BI,MAAM,KAAKH,UAAzC,EAAqD;AACxDQ,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,mCAA1B;AACAC,IAAAA,QAAQ,GAAGC,wBAAGC,SAAH,CAAaF,QAAb,CAAX;AACH;;AACDG,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,QAA1B;AACA,MAAMK,MAAM,GAAG;AACXV,IAAAA,GAAG,EAAHA,GADW;AAEXI,IAAAA,OAAO,EAAPA,OAFW;AAGXL,IAAAA,MAAM,EAANA,MAHW;AAIXY,IAAAA,cAAc,EAAE;AAAA,aAAM,IAAN;AAAA;AAJL,GAAf;;AAOA,MAAIZ,MAAM,KAAKL,UAAf,EAA2B;AACvBgB,IAAAA,MAAM,CAACE,MAAP,GAAgBP,QAAhB;AACH,GAFD,MAEO;AACHK,IAAAA,MAAM,CAACG,IAAP,GAAcR,QAAd;AACH;;AAED,SAAO,uBAAMK,MAAN,CAAP;AACH;;AAED,IAAMI,UAAU,GAAG;AACfC,EAAAA,GADe,eACXf,GADW,EACNK,QADM,EACkC;AAAA,QAA9BF,MAA8B,uEAArB,KAAqB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC7C,WAAON,UAAU,CAACJ,UAAD,EAAaM,GAAb,EAAkBI,OAAlB,EAA2BC,QAA3B,EAAqCF,MAArC,CAAjB;AACH,GAHc;AAKfa,EAAAA,IALe,gBAKVhB,GALU,EAKLK,QALK,EAKmC;AAAA,QAA9BF,MAA8B,uEAArB,KAAqB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC9C,WAAON,UAAU,CAACH,WAAD,EAAcK,GAAd,EAAmBI,OAAnB,EAA4BC,QAA5B,EAAsCF,MAAtC,CAAjB;AACH,GAPc;AASfc,EAAAA,GATe,eASXjB,GATW,EASNK,QATM,EASkC;AAAA,QAA9BF,MAA8B,uEAArB,KAAqB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC7C,WAAON,UAAU,CAACF,UAAD,EAAaI,GAAb,EAAkBI,OAAlB,EAA2BC,QAA3B,EAAqCF,MAArC,CAAjB;AACH,GAXc;AAAA,6BAaRH,GAbQ,EAaHK,QAbG,EAaqC;AAAA,QAA9BF,MAA8B,uEAArB,KAAqB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAChD,WAAON,UAAU,CAACD,aAAD,EAAgBG,GAAhB,EAAqBI,OAArB,EAA8BC,QAA9B,EAAwCF,MAAxC,CAAjB;AACH;AAfc,CAAnB;eAkBeW,U","sourcesContent":["import axios from 'axios';\nimport qs from 'querystring';\n\nconst METHOD_GET = 'get';\nconst METHOD_POST = 'post';\nconst METHOD_PUT = 'put';\nconst METHOD_DELETE = 'delete';\n\nfunction requestAPI(method, url, _headers = {}, _dataBody, isJSON = false) {\n    const headers = _headers;\n    let dataBody = _dataBody;\n\n    if (isJSON) {\n        headers['Content-Type'] = 'application/json';\n    }\n\n    if (isJSON && (method === METHOD_POST || method === METHOD_PUT)) {\n        headers['Content-Type'] = 'application/json';\n    } else if (method === METHOD_POST || method === METHOD_PUT) {\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        dataBody = qs.stringify(dataBody);\n    }\n    console.log('databody=>', dataBody);\n    const config = {\n        url,\n        headers,\n        method,\n        validateStatus: () => true,\n    };\n\n    if (method === METHOD_GET) {\n        config.params = dataBody;\n    } else {\n        config.data = dataBody;\n    }\n\n    return axios(config);\n}\n\nconst HttpClient = {\n    get(url, dataBody, isJSON = false, headers = {}) {\n        return requestAPI(METHOD_GET, url, headers, dataBody, isJSON);\n    },\n\n    post(url, dataBody, isJSON = false, headers = {}) {\n        return requestAPI(METHOD_POST, url, headers, dataBody, isJSON);\n    },\n\n    put(url, dataBody, isJSON = false, headers = {}) {\n        return requestAPI(METHOD_PUT, url, headers, dataBody, isJSON);\n    },\n\n    delete(url, dataBody, isJSON = false, headers = {}) {\n        return requestAPI(METHOD_DELETE, url, headers, dataBody, isJSON);\n    },\n};\n\nexport default HttpClient;\n"],"file":"httpclient.js"}