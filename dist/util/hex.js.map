{"version":3,"sources":["../../src/util/hex.js"],"names":["appendHexStart","str","str1","startsWith","substring","str2","length","hexStringToInt","strNo0x","parseInt","hexToAscii","hex","i","l","code","substr","String","fromCharCode","stripZeroXHexString","isHex","toLowerCase","slice","Error","val","test","removeLeadingZeroX","replace","hexString2Array","result","push","toHex","value","Buffer","toString","Uint8Array","from","BigNumber","isBigNumber"],"mappings":"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","sourcesContent":["import BigNumber from \"bignumber.js\";\n\nfunction appendHexStart(str){\n    let str1 = str.startsWith('0x')? str.substring(2): str;\n    let str2 = str1.length % 2 ? '0' + str1: str1;\n    return '0x' + str2;\n}\n\nfunction hexStringToInt(str) {\n    const strNo0x = str.startsWith('0x') ? str.substring(2) : str;\n    return parseInt(strNo0x, 16);\n}\n\nfunction hexToAscii(hex) {\n    // if (!isHexStrict(hex))\n    //     throw new Error('The parameter must be a valid HEX string.');\n\n    let str = '';\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i += 2) {\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n}\n\nfunction stripZeroXHexString(str) {\n    if(isHex(str)){\n        str = str.toLowerCase();\n        str = str.startsWith('0x')? str.slice(2): str;\n        return str;\n    }else{\n        throw Error('input must be a hex string')\n    }\n}\n\nfunction isHex(val) {\n    return typeof val === 'string' && /^(-0x|0x)?[0-9a-f]+$/i.test(val) === true;\n}\n\nfunction removeLeadingZeroX(val) {\n    return /^0x/i.test(val) === true ? val.replace(/^0x/i, '') : val;\n}\n\nfunction hexString2Array(str) {\n    if (str.startsWith('0x')) {\n        str = str.substring(2);\n    }\n\n    let result = [];\n    while (str.length >= 2) {\n        result.push(parseInt(str.substring(0, 2), 16));\n        str = str.substring(2, str.length);\n    }\n\n    return result;\n}\n\nfunction toHex(value) {\n    if (!value) {\n        return '0x00';\n    } else if (typeof value === 'string') {\n        return appendHexStart(value);\n    } else if (value instanceof Buffer) {\n        return appendHexStart(value.toString('hex'));\n    } else if (typeof value === 'number') {\n        return appendHexStart(value.toString(16));\n    } else if (value instanceof Uint8Array) {\n        return appendHexStart(Buffer.from(value).toString('hex'));\n    } else if (BigNumber.isBigNumber(value)) {\n        return appendHexStart(value.toString(16));\n    } else {\n        throw value;\n    }\n}\n\nexport {\n    toHex,\n    appendHexStart,\n    hexStringToInt,\n    hexToAscii,\n    stripZeroXHexString,\n    isHex,\n    removeLeadingZeroX,\n    hexString2Array\n};"],"file":"hex.js"}