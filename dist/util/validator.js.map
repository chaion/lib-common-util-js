{"version":3,"sources":["../../src/util/validator.js"],"names":["validateAmount","amount","test","validatePositiveInteger","input","validateMnemonic","mnemonic","mnemonicFormat","trim","split","join","bip39"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,cAAc,GAAI,SAAlBA,cAAkB,CAACC,MAAD,EAAY;AAChC,SAAO,2CAA2CC,IAA3C,CAAgDD,MAAhD,CAAP;AACH,CAFD;;;;AAIA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAW;AACvC,SAAO,gBAAgBF,IAAhB,CAAqBE,KAArB,CAAP;AACH,CAFD;;;;AAIA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD,EAAc;AACnC,MAAMC,cAAc,GAAGD,QAAQ,CAC1BE,IADkB,GAElBC,KAFkB,CAEZ,KAFY,EAGlBC,IAHkB,CAGb,GAHa,CAAvB;AAIA,SAAOC,KAAK,CAACN,gBAAN,CAAuBE,cAAvB,CAAP;AACH,CAND","sourcesContent":["import * as bip39 from 'bip39';\n\nconst validateAmount  = (amount) => {\n    return /^[0-9]?((\\.[0-9]+)|([0-9]+(\\.[0-9]+)?))$/.test(amount);\n};\n\nconst validatePositiveInteger = (input) => {\n    return /^[1-9][0-9]*$/.test(input)\n};\n\nconst validateMnemonic = (mnemonic) => {\n    const mnemonicFormat = mnemonic\n        .trim()\n        .split(/\\s+/)\n        .join(' ');\n    return bip39.validateMnemonic(mnemonicFormat);\n};\n\nexport {\n    validateAmount,\n    validatePositiveInteger,\n    validateMnemonic\n}"],"file":"validator.js"}